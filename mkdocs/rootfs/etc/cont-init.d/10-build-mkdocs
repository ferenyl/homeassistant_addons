#!/usr/bin/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Start the MkDocs service
# s6-overlay docs: https://github.com/just-containers/s6-overlay
# ==============================================================================

# Declare variables
declare source_type
declare local_path
declare git_url
declare ssh_key_path

# Get configuration
source_type=$(bashio::config 'source_type')
local_path=$(bashio::config 'local_path')
git_url=$(bashio::config 'git_url')
ssh_key_path=$(bashio::config 'ssh_key_path')

bashio::log.info "Starting MkDocs build"
bashio::log.info "Source type: ${source_type}"

# Create working directory
mkdir -p /tmp/mkdocs/source
mkdir -p /var/www/html

# Function: seed default mkdocs files into a target directory if missing
seed_defaults() {
    local target_dir
    target_dir="$1"

    # Ensure target directory exists
    mkdir -p "${target_dir}"

    # mkdocs.yml
    if [[ ! -f "${target_dir}/mkdocs.yml" ]]; then
        bashio::log.info "Seeding default mkdocs.yml to ${target_dir}..."
        cp /etc/mkdocs/default_mkdocs.yml "${target_dir}/mkdocs.yml" 2>/dev/null || true
    fi

    # docs content
    if [[ ! -d "${target_dir}/docs" ]] || [[ -z "$(ls -A "${target_dir}/docs" 2>/dev/null)" ]]; then
        bashio::log.info "Seeding default docs content to ${target_dir}/docs..."
        mkdir -p "${target_dir}/docs"
        cp -r /etc/mkdocs/docs/* "${target_dir}/docs/" 2>/dev/null || true
    fi

    # icon
    if [[ ! -f "${target_dir}/docs/assets/icon.png" ]]; then
        bashio::log.info "Seeding default icon to ${target_dir}/docs/assets/icon.png..."
        mkdir -p "${target_dir}/docs/assets"
        cp /etc/mkdocs/default_icon.png "${target_dir}/docs/assets/icon.png" 2>/dev/null || true
    fi
}

# Set default local_path if it is empty
if [[ -z "${local_path}" ]]; then
    local_path="/addon_config"
    bashio::log.info "Local path is empty, using default: ${local_path}"
fi

# Handle source type
if [[ "${source_type}" == "git" ]]; then
    bashio::log.info "Using Git source: ${git_url}"

    if [[ -z "${git_url}" ]]; then
        bashio::exit.nok "Git URL is required when source_type is 'git'"
    fi

    # Set up SSH if key is provided
    if [[ -n "${ssh_key_path}" ]] && [[ -f "${ssh_key_path}" ]]; then
        bashio::log.info "Setting up SSH key..."
        mkdir -p /root/.ssh
        cp "${ssh_key_path}" /root/.ssh/id_rsa
        chmod 600 /root/.ssh/id_rsa
        ssh-keyscan -H github.com >> /root/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H gitlab.com >> /root/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -H bitbucket.org >> /root/.ssh/known_hosts 2>/dev/null || true
    fi

    # Clone or pull repository
    if [[ -d "/tmp/mkdocs/source/.git" ]]; then
        bashio::log.info "Updating existing repository..."
        cd /tmp/mkdocs/source || exit
        git pull origin main || git pull origin master || bashio::log.warning "Could not pull latest changes"
    else
        bashio::log.info "Cloning repository..."
        git clone "${git_url}" /tmp/mkdocs/source || bashio::exit.nok "Failed to clone repository"
    fi

    # For git sources, seed defaults into the working directory after clone/pull
    seed_defaults "/tmp/mkdocs/source"
    seed_defaults "${local_path}"

elif [[ "${source_type}" == "local" ]]; then
    bashio::log.info "Using local source: ${local_path}"

    if [[ ! -d "${local_path}" ]]; then
        bashio::log.info "Local path '${local_path}' does not exist. Creating it now"
        mkdir -p "${local_path}"
    fi

    # Seed defaults into the local path before copying to the working directory
    seed_defaults "${local_path}"

    # Copy local files to working directory
    cp -r "${local_path}"/* /tmp/mkdocs/source/ 2>/dev/null || true
    cp -r "${local_path}"/.[^.]* /tmp/mkdocs/source/ 2>/dev/null || true

else
    bashio::exit.nok "Invalid source_type: ${source_type}. Must be 'git' or 'local'"
fi

# Install Python packages from requirements.txt if present
if [[ -f "/tmp/mkdocs/source/requirements.txt" ]]; then
    bashio::log.info "Installing Python packages from requirements.txt..."
    pip3 install -r "/tmp/mkdocs/source/requirements.txt" || bashio::log.warning "Failed to install one or more requirements"
fi

# Build documentation
bashio::log.info "Building documentation..."
cd /tmp/mkdocs/source || exit
mkdocs build --site-dir /var/www/html || bashio::exit.nok "Failed to build documentation"

bashio::log.info "Documentation built..."